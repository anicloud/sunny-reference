/**
 * Created by zhaoyu on 15-06-10.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.config = anicloud.sunny.config || {};

var languageList = {
    en: "English",
    zh_CN: "简体中文",
    zh_TW: "正體中文"
}

var languageTranslations = {
    'en': {},
    'zh_CN': {},
    'zh_TW': {}
}

/**
 * Created by zhaoyu on 15-06-10.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.config = anicloud.sunny.config || {};

anicloud.sunny.config.route = ['$stateProvider', '$locationProvider', '$urlRouterProvider',
    function ($stateProvider, $locationProvider, $urlRouterProvider) {
        'use strict';

        // Set the following to true to enable the HTML5 Mode
        // You may have to set <base> tag in index and a routing configuration in your server
        $locationProvider.html5Mode(false);
        $locationProvider.hashPrefix('');

        // defaults to dashboard
        $urlRouterProvider.otherwise('/app/dashboard');

        // Application Routes
        //var basepath = '/sunny/public/src/view/';
         var basepath='src/view/';
        $stateProvider
            .state('app', {
                url: '/app',
                templateUrl: basepath + 'app.html'
            })
            .state('app.dashboard', {
                url: '/dashboard',
                templateUrl: basepath + 'home.html'
            })
            .state('app.device', {
                url: '/device',
                templateUrl: basepath + 'device.html'
            })
            .state('app.strategy', {
                url: '/strategy',
                templateUrl: basepath + 'strategy-running.html'
            })
            .state('app.strategy_edit', {
                url: '/strategy_edit',
                templateUrl: basepath + 'strategy-edit.html'
            })
            .state('app.strategy_done', {
                url: '/strategy_done',
                templateUrl: basepath + 'strategy-done.html'
            })
            .state('app.error', {
                url: '/error',
                templateUrl: basepath + 'error.html'
            });

}]

/**
 * Created by libiya on 15/7/1.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.DeviceCtrl = function ($rootScope, $scope, ManagerService, Notify,DeviceService) {
    // main
    $scope.getGroups = function () {
        var json = {"default": 1};
        var groups = ["default"];
        for (var i = 0; i < $rootScope.devices.length; i++) {
            if (!json[$rootScope.devices[i].deviceGroup]) {
                groups.push($rootScope.devices[i].deviceGroup);
                json[$rootScope.devices[i].deviceGroup] = 1;
            }
        }
        return groups;
    };

    $scope.selectedGroup = "default";
    $scope.setDeviceFilter = function(group) {
        $scope.selectedGroup = group;
    };

    $scope.deviceFilterByGroup = function (device) {
        if ($scope.selectedGroup == "default")
            return true;
        if (device.deviceGroup == $scope.selectedGroup)
            return true;
        else
            return false;
    };

    // device detail
    $scope.deviceDetail = {};
    $scope.deviceDetail.visible = false;
    $scope.deviceDetail.device = null;
    $scope.deviceDetail.show = function (device) {
        $rootScope.deviceDetailVisible = true;
        $scope.deviceDetail.device = device;
        $scope.deviceDetail.featureCqhosen = null;
        $rootScope.DOMClickHasRun=false;
    };

    //$scope.deviceDetail.hide = function(event) {
    //    $rootScope.deviceDetailVisible = false;
    //    event.stopPropagation();
    //};

    $scope.deviceDetail.nameEditable = false;
    $scope.deviceDetail.nameInput = "";
    $scope.deviceDetail.editName = function() {
        $scope.deviceDetail.device.name = $scope.deviceDetail.nameInput;
        $scope.deviceDetail.nameEditable = false;
        DeviceService.editName($scope.deviceDetail.device.id,$scope.deviceDetail.device.name);
    };

    $scope.deviceDetail.getGroups = function () {
        var groups = $scope.getGroups();
        groups.push("添加新组");
        return groups;
    };

    $scope.deviceDetail.groupEditable = false;
    $scope.deviceDetail.groupChosen = "";
    $scope.deviceDetail.groupInput = "";
    $scope.deviceDetail.editGroup = function() {
        if($scope.deviceDetail.groupChosen=='添加新组'){
            $scope.deviceDetail.device.deviceGroup = $scope.deviceDetail.groupInput;
        }
        else{
            $scope.deviceDetail.device.deviceGroup = $scope.deviceDetail.groupChosen;
        }
        $scope.deviceDetail.groupEditable = false;
        $scope.deviceDetail.groupChosen = "";
        $scope.deviceDetail.groupInput = "";
        DeviceService.editGroup($scope.deviceDetail.device.id,$scope.deviceDetail.device.deviceGroup);
    };

    $scope.deviceDetail.getFeatureList = function() {
        if ($scope.deviceDetail.device != null) {
            return $rootScope.features[$scope.deviceDetail.device.id];
        }
    };

    $scope.deviceDetail.getArgumentList = function(feature) {
        $scope.deviceDetail.arguments = {};
        return feature.argDtoList;
    };

    $scope.deviceDetail.arguments = {};
    $scope.deviceDetail.start = function (feature) {
        var argumentMap = $scope.deviceDetail.arguments[feature.featureId];
        var argumentList = [];

        for (var arg in argumentMap) {
            var obj = {};
            obj.argName = arg;
            obj.value = argumentMap[arg];
            argumentList.push(obj);
         //   $scope.deviceDetail.device.initParam[arg] = argumentMap[arg];
        }

        var featureInstance = new anicloud.sunny.model.FeatureInstance(
            "",
            $scope.deviceDetail.device,
            feature,
            argumentList,
            [],
            true,
            moment()
        );
        featureInstance.intervalTime=0;
        delete featureInstance.absTime;
        var strategyInstance = new anicloud.sunny.model.StrategyInstance(
            "",
            "_PHONY_STRATEGY_",
            null,
            null,
            [featureInstance],
            {
                startTime:moment(),
                isScheduleNow:true,
                isRepeat:false,
                weekRepeat:[]
            });
        console.log(strategyInstance);
        ManagerService.addStrategy(jsonClone(strategyInstance));
    };
    $scope.deviceDetail.pause = function () {
        var key = $rootScope.deviceDetail.device.id;
        var strategy = $rootScope.phonyStrategyMap[key];
        ManagerService.pause(strategy);
    };
    $scope.deviceDetail.stop = function () {
        var key = $rootScope.deviceDetail.device.id;
        var strategy = $rootScope.phonyStrategyMap[key];
        ManagerService.stop(strategy);
    };
    $scope.deviceDetail.resume = function () {
        var key =  $rootScope.deviceDetail.device.id;
        var strategy = $rootScope.phonyStrategyMap[key];
        ManagerService.resume(strategy);
    };
    var jsonClone = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };

};





/**
 * Created by zhangdongming on 16-11-16.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.DeviceDetailCtrl = function ($rootScope, $scope, ManagerService, Notify,DeviceService){
    console.log($scope.deviceDetail);
    if(!$scope.deviceDetail.device&&$rootScope.devices.length>0) $scope.deviceDetail.device=$rootScope.devices[0];
    $scope.featureList=$scope.features[$scope.deviceDetail.device.id];
    $scope.powerOnObj=$rootScope.queryObjectByPropertyValue($scope.featureList,'featureName','Power On');
    $scope.powerOffObj=$rootScope.queryObjectByPropertyValue($scope.featureList,'featureName','Power Off');
    $scope.showLightSwitch=$scope.powerOnObj&&$scope.powerOffObj?true:false;
    if($scope.powerOnObj&&$scope.powerOffObj){
        $scope.switchFeatures=[$scope.powerOnObj[1],$scope.powerOffObj[1]];
    }
    $scope.readOnlyFeature=$scope.featureList.filter(function(feature,index){
        return feature.privilegeType==='READ';
    });
    console.log($scope.readOnlyFeature);

};
/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.FeatureEditCtrl = function ($rootScope, $scope, ManagerService) {
    // $scope.$watch('trigger',function (newVal,oldVal) {
    //     var latestTaskTime;
    //     if(newVal['triggerType']==="TIMER"){
    //         latestTaskTime=moment(new Date());
    //         $rootScope.strategies.forEach(function (strategy) {
    //             if(strategy.state==='RUNNING'){
    //                 strategy.featureList.forEach(function (feature) {
    //                     if(feature.device.id==$scope.device.id&&feature.deviceFeature.featureId==$scope.feature.featureId){
    //                         feature.triggerDtoList.forEach(function (triggerDto) {
    //                             var startTime=JSON.parse(triggerDto.value)['startTime'];
    //                             console.log(startTime);
    //                             startTime=moment(startTime);
    //                             console.log('temp1',JSON.parse(triggerDto.value)['startTime'],startTime,latestTaskTime);
    //                             if(latestTaskTime.isBefore(startTime)) latestTaskTime=startTime;
    //                         })
    //                     }
    //                 })
    //             }
    //         });
    //         console.log('latestTaskTime',latestTaskTime,moment(latestTaskTime).add(1,'months'));
    //         $('#datetimepicker12').datetimepicker({
    //             inline: true,
    //             minDate:latestTaskTime,
    //             maxDate:moment(latestTaskTime).add(1,'months')
    //         });
    //     }
    // },true);
    // feature Template
    $scope.connectedDevices=$scope.devices.filter(function (device) {
       return device.deviceState==="CONNECTED";
    });
    $scope.device = null;
    $scope.feature = null;
    $scope.trigger = {
        "triggerValue": "",
        "triggerType": ""
    };
    $scope.triggerTimer = {
        "startTime": new Date(),
        "repeatInterval": 0,
        "repeatCount": 0
    };
    $scope.isCalenderOpen = true;
    $scope.valid = true;
    $scope.error = "";

    $scope.getDeviceFeatures = function () {
        if ($scope.device == null) {
            return null;
        }
        return $rootScope.features[$scope.device.id].filter(function (feature) {
            return feature.privilegeType==="EXECUTE";
        });
    };
    $scope.initFeatureParam=function (feature) {
        $scope.featureArgMap = {};
        feature.argDtoList.forEach(function (item) {
            $scope.featureArgMap[item.name]=$scope.device.initParam[item.name];
        });
    };
    $scope.addFeature = function (strategy) {
        $scope.valid = true;

        // if ($scope.device == null) {
        //     $scope.valid = false;
        //     $scope.error = "设备不能为空";
        //     return false;
        // }
        // if ($scope.feature == null) {
        //     $scope.valid = false;
        //     $scope.error = "任务不能为空";
        //     return false;
        // }
        // if ($scope.trigger.triggerType == '') {
        //     $scope.valid = false;
        //     $scope.error = "触发条件不能为空";
        //     return false;
        // }

        var argumentList = [];
        for (var arg in $scope.featureArgMap) {
            var obj = {};
            obj.argName = arg;
            obj.value = $scope.featureArgMap[arg];
            argumentList.push(obj);
        }
        console.log(argumentList);

        if ($scope.trigger.triggerType == "TIMER") {
            console.log($scope.triggerTimer);
            $scope.trigger.triggerValue = JSON.stringify($scope.triggerTimer);
            console.log($scope.trigger.triggerValue);
        }

        var featureInstance = new anicloud.sunny.model.FeatureInstance(
            "",
            $scope.device,
            $scope.feature,
            argumentList,
            [$scope.trigger],
            false,
            $scope.currentAbsTime
        );
        ManagerService.addFeature(featureInstance, strategy);
        return true;
    };

    $scope.openCalendar = function(e) {
        e.preventDefault();
        e.stopPropagation();

        $scope.isCalenderOpen = true;
    };
    //
    var jsonClone = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };

        $scope.mytime = new Date();

        $scope.hstep = 1;
        $scope.mstep = 1;

        $scope.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
        };

        $scope.ismeridian = true;
        $scope.toggleMode = function() {
            $scope.ismeridian = ! $scope.ismeridian;
        };
    $scope.lastFeatureAbsTime=$scope.ngDialogOpenNum?$scope.strategyTemplate.featureList[$scope.ngDialogOpenNum-1].absTime:$scope.strategyRepeat.startTime
    $scope.currentAbsTime=$scope.lastFeatureAbsTime;
    //console.log($scope.currentAbsTime,$scope.strategyRepeat.startTime);
    $scope.currentRelTime=$scope.currentAbsTime.from($scope.lastFeatureAbsTime);
    $scope.changeInterval=function (ary) {
        var num=ary[0],unit=ary[1];
        if(num>0){
            var newTime=moment($scope.currentAbsTime).add(Math.abs(num),unit)
        }else{
            newTime=moment($scope.currentAbsTime).subtract(Math.abs(num),unit)
        }
        if(newTime.isBefore(moment($scope.strategyRepeat.startTime).add(1,'day'))
            &&newTime.isAfter(moment($scope.lastFeatureAbsTime))){
            $scope.currentAbsTime=newTime;
            $scope.currentRelTime=$scope.currentAbsTime.from($scope.lastFeatureAbsTime);
        }else{
            return false;
        }
    }
};
/**
 * Created by zhaoyu on 15-6-10.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};


anicloud.sunny.controller.HomePageCtrl = function ($scope, $rootScope, $cookies, WebSocketService, StrategyService, DeviceService) {
    $rootScope.routeIndex=0;
//    For Dashboard page

    //
    //$scope.deviceTemplate = {
    //    "deviceId": "",
    //    "name": "",
    //    "deviceType": "",
    //    "deviceState": "",
    //    "deviceGroup": ""
    //}
    //
    //$scope.isToggled = true;
    //$scope.curDevice = null;
    //$scope.toggleDeviceDetail = function (device) {
    //    if ($scope.curDevice == null) {
    //        $scope.isToggled = !$scope.isToggled;
    //    }
    //    else if ($scope.curDevice.id == device.id) {
    //        $scope.isToggled = !$scope.isToggled;
    //    }else {
    //        $scope.isToggled = false;
    //    }
    //    $scope.curDevice = device;
    //
    //}
    //$scope.toggleStatus = [];
    //
    //$scope.toggleOpen = function(index) {
    //    $scope.toggleStatus[index] = !$scope.toggleStatus[index];
    //}

    //$scope.deviceDetail.toggle = function (device) {
    //    if ($scope.deviceDetail.device == null) {
    //        $scope.deviceDetail.isToggled = !$scope.deviceDetail.isToggled;
    //    }
    //    else if ($scope.deviceDetail.device.id == device.id) {
    //        $scope.deviceDetail.isToggled = !$scope.deviceDetail.isToggled;
    //    }else {
    //        $scope.deviceDetail.isToggled = false;
    //    }
    //    $scope.deviceDetail.device = device;
    //    $scope.deviceDetail.featureChosen = null;
    //}
    $scope.showIndex=-1;
    $scope.getAbsTime=function (time) {
        return moment(time).format('MM-DD HH:mm');
    };
    $scope.getRelTime=function(time){
        return moment(time).from(moment(1));
    }
    $scope.classLamp='icon-appliances-lamp';
};


/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.MainCtrl = function ($rootScope, $scope) {
    $scope.isAsideCollapsed = true;
    $scope.setAsideCollapse = function () {
        $scope.isAsideCollapsed = !$scope.isAsideCollapsed;
    };
}
/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.RepeatCtrl = function ($rootScope, $scope, ManagerService,$timeout) {
    $timeout(function () {
        console.log('timeout',document.querySelector('#datetimepicker12'));
        $('#datetimepicker12').on('dp.change',function (e) {
            $scope.tempRepeat.startTime= e.date.locale('zh-cn');
            $scope.$apply();
        });
        $scope.tempRepeat={
            isRepeat:$scope.strategyRepeat.isRepeat,
            startTime:$scope.strategyRepeat.startTime,
            name:$scope.strategyTemplate.strategyName,
            nameRequired:true,
            weekRequired:true
        };
        $scope.tempRepeat.repWeek=[false,false,false,false,false,false,false];
        $scope.strategyRepeat.weekRepeat.forEach(function(item,index){
            $scope.tempRepeat.repWeek[item]=true;
        });
        $scope.save=function(){
            if(!$scope.tempRepeat.name){
                $scope.tempRepeat.nameRequired=false;
                return false;
            }
            if($scope.tempRepeat.isRepeat&&$scope.tempRepeat.repWeek.toString()===[false,false,false,false,false,false,false].toString()){
                $scope.tempRepeat.weekRequired=false;
                return false
            }
            $scope.strategyTemplate.strategyName=$scope.tempRepeat.name;
            $scope.strategyRepeat.startTime=$scope.tempRepeat.startTime;
            $scope.strategyRepeat.weekRepeat=[];
            $scope.strategyRepeat.isRepeat=$scope.tempRepeat.isRepeat;
            $scope.tempRepeat.repWeek.forEach(function(item,index){
                return item?$scope.strategyRepeat.weekRepeat.push(index):null;
            });
            localStorage.setItem('currentStrategyTime',$scope.tempRepeat.startTime.toJSON());
            $scope.closeThisDialog();
        }
    },100);
};

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.RangeSliderCtrl = function ($rootScope, $scope) {

    function getDomElement(element, all) {
        if (all && all !== undefined) {
            return document.querySelectorAll(element);
        } else {
            return document.querySelector(element);
        }
    };

    function ngElement(element) {
        return angular.element(element);
    };

    var fromRange = getDomElement('.fromRange'),
        toRange = getDomElement('.toRange'),
        rngCont = getDomElement('.rangeContainer'),
        rangeLeft = getDomElement('.rangeLeft'),
        rangeRight = getDomElement('.rangeRight'),
        spinLeft = getDomElement('.spinLeft'),
        spinRight = getDomElement('.spinRight');

    $scope.minRange = +fromRange.dataset.min;
    $scope.maxRange = +toRange.dataset.max;

    $scope.fromRange = $scope.minRange;
    $scope.toRange = $scope.maxRange;

    function setStartPositionFromRange() {
        var leftStartPosition = Math.round(($scope.fromRange * 100) / $scope.maxRange);
        rangeLeft.style.width = leftStartPosition + '%';
        spinRight.style.zIndex = '0';
        spinLeft.style.zIndex = '1';
    };

    function setStartPositionToRange() {
        var rightStartPosition = Math.round(100 - (($scope.toRange * 100) / $scope.maxRange));
        rangeRight.style.width = rightStartPosition + '%';
        spinRight.style.zIndex = '1';
        spinLeft.style.zIndex = '0';
    };

    $scope.minus = function (direction) {
        if (direction == 'from' && $scope.fromRange > $scope.minRange) {
            $scope.fromRange--;
            setStartPositionFromRange();
        }
        if (direction == 'to' && $scope.fromRange != $scope.toRange) {
            $scope.toRange--;
            setStartPositionToRange();
        }
    };

    $scope.plus = function (direction) {
        if (direction == 'from' && $scope.toRange != $scope.fromRange) {
            $scope.fromRange++;
            setStartPositionFromRange();
        }
        if (direction == 'to' && $scope.toRange < $scope.maxRange) {
            $scope.toRange++;
            setStartPositionToRange();
        }
    };

    (function setStartPositions() {
        var rightStartPosition = Math.round(100 - (($scope.maxRange * 100) / $scope.maxRange));
        var leftStartPosition = Math.round(($scope.minRange * 100) / $scope.maxRange);
        rangeRight.style.width = rightStartPosition + '%';
        rangeLeft.style.width = leftStartPosition + '%';
    })();

    fromRange.onchange = function () {
        var thisVal = +fromRange.value;
        if (!isNaN(thisVal) && thisVal >= $scope.minRange) {

            if (thisVal >= $scope.toRange) {
                fromRange.value = $scope.toRange;
                $scope.fromRange = $scope.toRange;
                setStartPositionFromRange();
            } else {
                $scope.fromRange = thisVal;
                setStartPositionFromRange();
            }

        } else {
            fromRange.value = $scope.minRange;
            $scope.fromRange = $scope.minRange;
            setStartPositionFromRange();
        }
    };

    toRange.onchange = function () {
        var thisVal = +toRange.value;
        if (!isNaN(thisVal) && thisVal <= $scope.maxRange) {

            if (thisVal <= $scope.fromRange) {
                toRange.value = $scope.fromRange;
                $scope.toRange = $scope.fromRange;
                setStartPositionToRange();
            } else {
                $scope.toRange = thisVal;
                setStartPositionToRange();
            }

        } else {
            toRange.value = $scope.maxRange;
            $scope.toRange = $scope.maxRange;
            setStartPositionToRange();
        }
    };

    function fixEvent(event) {
        event = event || window.event;
        if (!event.target) event.target = event.srcElement;

        if (event.pageX == null && event.clientX != null) {
            var html = document.documentElement,
                body = document.body;
            event.pageX = event.clientX + (html.scrollLeft || body && body.scrollLeft || 0);
            event.pageX -= html.clientLeft || 0;
        }

        if (!event.which && event.button) {
            event.which = event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) )
        }

        return event;
    };


    function getCoords(elem) {
        var box = elem.getBoundingClientRect();
        var body = document.body;

        var docElem = document.documentElement;
        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
        var clientLeft = docElem.clientLeft || body.clientLeft || 0;
        var left = box.left + scrollLeft - clientLeft;

        return Math.round(left);
    };

    //=========================================================================//
    var sliderBoxCoordsLeft = getCoords(rngCont);
    var containerWidth = rngCont.offsetWidth || rngCont.clientWidth;
    //=========================================================================//

    function positions(spin) {
        document.onmousemove = function (event) {
            event = fixEvent(event);
            var positionPercent = ((event.pageX - sliderBoxCoordsLeft) / containerWidth) * 100;
            var newPosRightSpin = 100 - positionPercent;
            var range = Math.round(($scope.maxRange / 100) * positionPercent);

            if (spin == 'left' && positionPercent <= 100) {
                range = (range <= 0) ? 0 : range;
                if (range >= $scope.minRange && range <= $scope.toRange) {
                    fromRange.value = range;
                    $scope.fromRange = range;
                    rangeLeft.style.width = positionPercent + '%';
                }
            }

            if (spin == 'right' && newPosRightSpin <= 100) {
                range = (range >= $scope.maxRange) ? $scope.maxRange : range;
                if (range >= $scope.fromRange) {
                    toRange.value = range;
                    $scope.toRange = range;
                    rangeRight.style.width = newPosRightSpin + '%';
                }
            }
        }

        document.onmouseup = function () {
            ngElement(spinRight).removeClass('active');
            ngElement(spinLeft).removeClass('active');
            document.onmousemove = document.onmouseup = null;
        }
    };

    spinLeft.onmousedown = function () {
        spinRight.style.zIndex = '0';
        spinLeft.style.zIndex = '1';
        ngElement(spinLeft).addClass('active');
        positions('left');
        return false;
    };

    spinRight.onmousedown = function () {
        spinRight.style.zIndex = '1';
        spinLeft.style.zIndex = '0';
        ngElement(spinRight).addClass('active');
        positions('right');
        return false;
    };

};
/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.StrategyCtrl = function ($rootScope, $scope, ngDialog, ManagerService) {
    $scope.deleteStrategy = function (index, strategy) {
        ManagerService.stopStrategy(strategy);
        ManagerService.deleteStrategy(index, strategy);
        return true;
    };
    
    $scope.resumeStrategy = function (index, strategy) {
        ManagerService.resumeStrategy(strategy);
        return true;
    };
    
    $scope.stopStrategy = function (index, strategy) {
        if(strategy.state == 'RUNNING') {
            ManagerService.stopStrategy(strategy);
            return true;
        }
    };
    
    $scope.pauseStrategy = function (index, strategy) {
        if(strategy.state == 'RUNNING') {
            ManagerService.pauseStrategy(strategy);
            return true;
        }
    };
    
    $scope.toggleStatus = [];
    
    $scope.toggleOpen = function(index) {
        $scope.toggleStatus[index] = !$scope.toggleStatus[index];
    };
    
    $scope.setProgressLength = function (strategy) {
        var stage = strategy.stage;
        var len = strategy.featureList.length;
        return {width: (stage / len * 100) + '%'};
    };
    $scope.setBadgeColor = function (fNum, stage) {
        return {'background-color': fNum < stage ? '#eba963' : 'default'};
    };
    $scope.showState = function(strategy) {
        if(strategy.state == "NONE") {
    
        }else if(strategy.state == "RUNNING") {
            var stage = parseInt(strategy.stage);
            var info = strategy.featureList[stage].deviceFeature.featureName;
            return "正在执行:" + info;
        }else if(strategy.state == "SUSPENDED") {
            return "暂停";
        }else if(strategy.state == "DONE") {
            return "已完成";
        }
    };
    
    $scope.strategyFilterDone = function (strategy) {
        if (strategy.state == "DONE" && strategy.strategyName != "_PHONY_STRATEGY_") {
            return true;
        } else {
            return false;
        }
    };
    
    $scope.strategyFilterRunning = function (strategy) {
        if ((strategy.state == "RUNNING" || strategy.state == "SUSPENDED") && strategy.strategyName != "_PHONY_STRATEGY_") {
            return true;
        } else {
            return false;
        }
    };
    $scope.changeToObj = function (str) {
        return JSON.parse(str);
    }
    
    $scope.triggerTimerToDate = function(value) {
        var obj = JSON.parse(value);
        return obj.startTime;
    }
    
    $scope.setOpStyle = function(strategy) {
        if(strategy.state == 'DONE')
            return {color: '#eaeaea', cursor:'not-allowed' };
    }
    
};
/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};


anicloud.sunny.controller.StrategyEditCtrl = function ($rootScope, $scope, ngDialog, ManagerService) {
    localStorage.setItem('currentStrategyTime','');
    $scope.openFeatureEditTemplate = function () {
        ngDialog.open(
            {
                template: $rootScope.currentConfig.defaultPath+'/src/view/feature-edit.html',
                scope: $scope,
                controller: 'FeatureEditCtrl'
            });
    };
    
    $scope.openRepeatTemplate = function () {
        ngDialog.open(
            {
                template: $rootScope.currentConfig.defaultPath+'/src/view/repeat.html',
                scope: $scope,
                controller: 'RepeatCtrl'
            });
    };
    
    $scope.deleteFeature = function (index, strategy) {
        ManagerService.deleteFeature(index, strategy);
    };
    
    // strategy Template
    $scope.strategyTemplateInit=function () {
        $scope.strategyTemplate = {
            "strategyId": "",
            "strategyName": "",
            "strategyState": "",
            "strategyDescription": "",
            "strategyStage": "",
            "featureList": [],
            "valid": true,
            "error": "",
            "repeatConfig": {
                "week": [],
                "end":{
                    "type":"count",
                    "value":"1"
                }
            }
        };
        $scope.strategyRepeat={ //init
            isRepeat:false, //once,week
            weekRepeat:[],  //[] if isRepeat is once
            startTime:moment(),
            isScheduleNow:false   //
        };
        $scope.ngDialogOpenNum=0;
    };
    $scope.strategyTemplateInit();
    $scope.strategyTemplate.clearAll = function () {
        $scope.strategyTemplate.strategyName = "";
        $scope.strategyTemplate.strategyDescription = "";
        $scope.strategyTemplate.strategyState = "";
    };
    $scope.addStrategy = function () {
        //$scope.strategyTemplate.valid = true;
        // if ($scope.strategyTemplate.strategyName.length == 0) {
        //     $scope.strategyTemplate.valid = false;
        //     $scope.strategyTemplate.error = "名称不能为空";
        //     return false;
        // }
        // if ($scope.strategyTemplate.featureList.length == 0) {
        //     $scope.strategyTemplate.valid = false;
        //     $scope.strategyTemplate.error = "任务不能为空";
        //     return false;
        // }
        //sort featureList by time
        // $scope.strategyTemplate.featureList.sort(function (strategy1,strategy2) {
        //    var time1=moment(strategy1.triggerDtoList[0].triggerValue);
        //     var time2=moment(strategy2.triggerDtoList[0].triggerValue);
        //     console.log('time',time1,time2);
        //     if(time1.isBefore(time2))return -1;
        //     else  return 1;
        // });
        $scope.strategyTemplate.featureList.forEach(function (feature,index) {
            if(!index){
                feature.intervalTime=Math.abs($scope.strategyRepeat.startTime.diff(feature.absTime));
            }else{
                feature.intervalTime=Math.abs($scope.strategyTemplate.featureList[index-1].absTime.diff(feature.absTime));
            }
            return feature
        });
        $scope.strategyTemplate.featureList.forEach(function (feature) {
            delete feature.absTime
        });
        var index=$scope.strategyRepeat.weekRepeat.indexOf(0);
        if(index>-1)$scope.strategyRepeat.weekRepeat.splice(index,1,7);
        var strategyInstance = new anicloud.sunny.model.StrategyInstance(
            $scope.strategyTemplate.strategyId,
            $scope.strategyTemplate.strategyName,
            null,
            null,
            $scope.strategyTemplate.featureList,
            $scope.strategyRepeat
        );
    
        // ManagerService.addStrategy(strategyInstance).then(function (data) {
        //     console.log(data);
        // });
        ManagerService.addStrategy(strategyInstance).then(function (res) {
            if(res.status.toString()==='success'){
                $scope.strategyTemplateInit()
            }
        });
        return true;
    };
    $scope.triggerTimerToDate = function(value) {
        var obj = JSON.parse(value);
        return obj.startTime;
    };
    
    //
    var jsonClone = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };

   
};
/**
 * Created by libiya on 15/6/27.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};

anicloud.sunny.controller.UserCtrl = function ($rootScope, $scope, $window, UserService) {
    var user = $.cookie('sunny_user');
    if (user != undefined) {
        var usercookie = JSON.parse(user);
        $scope.currentUser = usercookie;
    }

    $scope.logout = function () {
        // UserService.logout(function(data) {
        //     if (data.status == "success") {
        //         $window.location.href = "logout";
        //     } else {
        //         console.log("user logout error.");
        //     }
        // });
        $window.location.href = "logout";
    }

    $scope.switchUser = function() {
        $window.location.href = "switchUser?hashUserId=" + $scope.currentUser.hashUserId;
    }
}
/**
 * Created by zhangdongming on 2017/1/4.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.directive = anicloud.sunny.directive || {};
anicloud.sunny.directive.deviceInfo = function ($rootScope) {
        return {
        restrict: 'AEC',
        scope:{
          device:'=',
          deviceDetail:'=',
            showIndex:'=',
            features:'=',
            index:"="
        },
            templateUrl:$rootScope.currentConfig.defaultPath+'/src/view/deviceInfo-template.html',
        link: function (scope, element, attrs) {
            scope.deviceToggle=function ($event) {
                $event.stopPropagation();
                scope.showIndex===scope.index?scope.showIndex=-1:scope.showIndex=scope.index;
                scope.deviceDetail.device=scope.device;
                $rootScope.deviceDetailVisible=true;
            };
            var $Box=$(element[0]).find('.device-box');
            var $BoxBlockTop=$(element[0]).find('.device-block-top');
            var $BoxBlockBottom=$(element[0]).find('.device-block-bottom');
            var $BoxToggle=$(element[0]).find('.device-toggle');
           //function initFirstParam(){
           //     var deviceFeatures=scope.features[scope.device.id];
           //     for(var i=0;i<deviceFeatures.length;i++){
           //         var feature=deviceFeatures[i];
           //         if(feature.argDtoList.length>0){
           //             var firstParam=scope.device.initParam[feature.argDtoList[0].name];
           //             firstParam=firstParam||firstParam===0?firstParam:'未获取';
           //             return scope.firstParamName=feature.argDtoList[0].screenName,
           //                    scope.firstParam=firstParam;
           //         }
           //     }
           // };
           // scope.$watch('device.initParam',function(newVal,oldVal){
           //     if(!oldVal||scope.features.length===0) return;
           //     initFirstParam();
           // },true);
           // scope.$watch('features[0]',function(newVal,oldVal){
           //     console.log(newVal,oldVal);
           //     if(oldVal.length===0||!scope.device) return;
           //     initFirstParam();
           // },true);
            //if(scope.device.id&&scope.features.length>0){
            //    initFirstParam();
            //}
           // console.log($Box,$BoxBlockBottom,$BoxBlockTop,$BoxToggle);

            //$Box.find('.device-box').(function(e){
            //    if($(element[0]).find('.device-cel-disconnect')[0]) return;
            //    $(element[0]).find('.device-toggle').removeClass('device-hide').addClass('device-show');
            //    scope.$apply()
            //},function(e){
            //    if($(element[0]).find('.device-cel-disconnect')[0]) return;
            //    $(element[0]).find('.device-toggle').removeClass('device-show').addClass('device-hide');
            //    scope.$apply()
            //});
            $BoxBlockBottom.click(function(event){
                if($(element[0]).find('.device-cel-disconnect')[0]) return;
                    $BoxToggle.removeClass('device-hide').addClass('device-show');
            });
            $BoxToggle.click(function(event){
                if($(element[0]).find('.device-cel-disconnect')[0]) return;
                $BoxToggle.removeClass('device-show').addClass('device-hide');
            })
        }
    }
};
/**
 * Created by libiya on 15/7/22.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.directive = anicloud.sunny.directive || {};
anicloud.sunny.directive.focus = function () {
    return {
        link: function (scope, element, attrs) {
            element.focus();
        }
    }
};

/**
 * Created by zhangdongming on 2017/1/5.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.directive = anicloud.sunny.directive || {};
anicloud.sunny.directive.switchButton = function ($rootScope) {
    return {
        restrict: 'AEC',
        scope:{
            switchFeatures:'=',
            deviceDetail:'='
        },
        templateUrl:$rootScope.currentConfig.defaultPath+'/src/view/switch-template.html',
        link: function (scope, element, attrs) {
            scope.powerOnObjFeature=$rootScope.queryObjectByPropertyValue(scope.switchFeatures,'featureName','Power On');
            scope.powerOffObjFeature=$rootScope.queryObjectByPropertyValue(scope.switchFeatures,'featureName','Power Off');
            $("[name='deviceDetail-switch']").bootstrapSwitch('size','mini');
            $("[name='deviceDetail-switch']").on('switchChange.bootstrapSwitch',function(e,state){
                console.log(e);
                if(state===true){
                    scope.deviceDetail.start(scope.powerOnObjFeature[1]);
                }else{
                    scope.deviceDetail.start(scope.powerOffObjFeature[1]);
                }
            })
        }
    }
};
/**
 * Created by sirhuoshan on 2015/7/13.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {}
anicloud.sunny.model = anicloud.sunny.model || {}

anicloud.sunny.model.FeatureInstance = function(){}
anicloud.sunny.model.FeatureInstance = function (
    featureInstanceId,
    device,
    deviceFeature,
    featureArgValueDtoList,
    triggerDtoList,
    isScheduleNow,
    absTime
) {
    var _this = this;
    _this.featureInstanceId=featureInstanceId;
    _this.device=device;
    _this.deviceFeature=deviceFeature;
    _this.featureArgValueDtoList=featureArgValueDtoList;
    _this.triggerDtoList=triggerDtoList;
    _this.isScheduleNow=isScheduleNow;
    _this.absTime=absTime
}




/**
 * Created by huangbin on 7/28/15.
 */

var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.model = anicloud.sunny.model || {};

anicloud.sunny.model.StrategyInstance = function() {};

anicloud.sunny.model.StrategyInstance = function (
    strategyId,
    strategyName,
    state,
    stage,
    featureList,
    strategyRepeat
) {
    var _this = this;
    _this.strategyId = strategyId;
    _this.strategyName = strategyName;
    _this.state = state;
    _this.stage = stage;
    _this.featureList = featureList;
    _this.startTime=strategyRepeat.startTime;
    _this.isScheduleNow=strategyRepeat.isScheduleNow;
    _this.isRepeat=strategyRepeat.isRepeat;
    _this.repeatWeek=strategyRepeat.weekRepeat
};
/**
 * Created by sirhuoshan on 2015/7/6.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.DeviceService = function ($http, $cookies) {
    return {
        getDevices: function (callback) {
            var user = $.cookie('sunny_user');
            if (user != undefined) {
                var usercookie = JSON.parse(user);
                var hashUserId = usercookie.hashUserId;
                $http({
                    method: 'GET',
                    url: 'devices',
                    params: {hashUserId: hashUserId}
                }).then(function (data) {
                    callback(data.data);
                }, function () {
                    console.log('get devices failures');
                })
            }

        },
        editGroup: function (deviceId, groupName) {
            $http({
                method: 'POST',
                url: 'device/' + deviceId,
                data: angular.toJson({deviceGroup: groupName})
            }).then(function (data) {
                if (data)console.log('edit device_group successful');
            },function (data) {
                console.log('edit device_group failures');
            })
        },
        editName: function (deviceId, deviceName) {
            $http({
                method: 'POST',
                url: 'device/' + deviceId,
                data: angular.toJson({deviceName: deviceName})
            }).then(function (data) {
                if (data)console.log('edit device_name successful');
            },function (data) {
                console.log('edit device_name failures');
            })
        },
        getDeviceFeatures: function () {
            return $http({
                method: 'GET',
                url: 'features'
            }).then(function (data) {
                return data.data;
            },function (data) {
                console.log('get feature failures');
            })
        },
        getDeviceFeatureByID: function (callback, deviceId) {
            $http({
                method: 'GET',
                url: 'feature',
                params: {deviceId: deviceId}
            }).then(function (data) {
                callback(data);
            },function (data) {
                console.log('get feature failures');
            })
        },
        getFeatureTrigger: function (callback) {
            $http({
                method: 'GET',
                url: 'triggers'
            }).then(function (data) {
                callback(data.data);
            },function (data) {
                console.log('get feature failures');
            })
        },
        getDeviceInitParam: function (callback, deviceId) {
            $http({
                method: 'GET',
                url: 'initParam/' + deviceId,
                params: {deviceId: deviceId}
            }).then(function (data) {
                callback(data);
            },function (data) {
                console.log('get device init param failures');
            })
        }
    }
}
/**
 * Created by sirhuoshan on 2015/7/1.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.ManagerService = function ($rootScope, StrategyService, Notify) {
    var jsonClone = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };

    return {
        addFeature: function (feature, strategy) {
         //   strategy.featureList.push(jsonClone(feature));
            strategy.featureList.push(feature);
        },

        deleteFeature: function (index, strategy) {
            strategy.featureList.splice(index, 1);
        },

        addStrategy: function (strategy) {
            return StrategyService.saveStrategies(strategy).then(function (data) {
                console.log(data);
                if (data.status == "success") {
                    var notifyMsg = "计划已添加";
                    var notifyOpts = {
                        status: 'info',
                        pos: 'bottom-center'
                    };
                    Notify.alert(notifyMsg, notifyOpts);
                    console.log("add strategy ok:");
                    // updateStrategy(data.strategy);
                } else if (data.status == "error") {
                    console.error("add strategy error: ");
                    console.error(data.message);
                }
                return data;
            });
        },

        deleteStrategy: function (index, strategy) {
            StrategyService.deleteStrategy(strategy.strategyId, function (data) {
                if (data.status == "success") {
                    var deletedStrategy = $rootScope.strategies.splice(index, 1)[0];
                    var notifyMsg = "计划已删除";
                    var notifyOpts = {
                        status: 'info',
                        pos: 'bottom-center'
                    };
                    Notify.alert(notifyMsg, notifyOpts);
                    console.log("delete strategy ok:");
                } else if (data.status == "error") {
                    console.error("delete strategy error: ");
                    console.error(data.message);
                }
            });
        },

        resumeStrategy: function (strategy) {
            StrategyService.operateStrategy(strategy.strategyId, "RESUME", function (data) {
                if (data.status == "success") {
                    var notifyMsg = "计划已恢复";
                    var notifyOpts = {
                        status: 'info',
                        pos: 'bottom-center'
                    };
                    Notify.alert(notifyMsg, notifyOpts);
                    console.log("resume strategy ok:");
                } else if (data.status == "error") {
                    console.error("resume strategy error: ");
                    console.error(data.message);
                }
            });
        },

        stopStrategy: function (strategy) {
            console.log("pre delete:");
            console.log(strategy);
            StrategyService.operateStrategy(strategy.strategyId, "STOP", function (data) {
                if (data.status == "success") {
                    var notifyMsg = "计划已停止";
                    var notifyOpts = {
                        status: 'info',
                        pos: 'bottom-center'
                    };
                    Notify.alert(notifyMsg, notifyOpts);
                    console.log("stop strategy ok:");
                } else if (data.status == "error") {
                    console.error("resume strategy error: ");
                    console.error(data.message);
                }
            });
        },

        pauseStrategy: function (strategy) {
            StrategyService.operateStrategy(strategy.strategyId, "PAUSE", function (data) {
                if (data.status == "success") {
                    var notifyMsg = "计划已暂停";
                    var notifyOpts = {
                        status: 'info',
                        pos: 'bottom-center'
                    };
                    Notify.alert(notifyMsg, notifyOpts);
                    console.log("pause strategy ok:");
                } else if (data.status == "error") {
                    console.error("pause strategy error: ");
                    console.error(data.message);
                }
            });
        },

        // updateStrategyDevice: function (obj) {
        //    // alert(JSON.stringify(obj));
        //    if(obj.kind == 0) {//device update
        //        var device = obj.instance;
        //        var isNew = true;
        //        for (var i = 0; i < $rootScope.devices.length; i++) {
        //            if ($rootScope.devices[i].id == device.id) {
        //                $rootScope.devices.splice(i, 1, JSON.parse(JSON.stringify(device)));
        //                isNew = false;
        //                console.log("update device:");
        //                console.log(device);
        //            }
        //        }
        //        if (isNew) {
        //            console.log("update device:");
        //            console.log(device);
        //            $rootScope.devices.push(device);
        //            console.log(device);
        //        }
        //        //location.reload();
        //    } else if(obj.kind == 1){//strategy update
        //        // handle normal strategy
        //        var isNew = true;
        //        var strategy = obj.instance;
        //        for (var i = 0; i < $rootScope.strategies.length; i++) {
        //            if ($rootScope.strategies[i].strategyId == strategy.strategyId) {
        //                $rootScope.strategies.splice(i, 1, JSON.parse(JSON.stringify(strategy)));
        //                isNew = false;
        //                console.log("update strategy:");
        //                console.log(strategy);
        //            }
        //        }
        //        if (isNew) {
        //            console.log("update strategy:");
        //            console.log(strategy);
        //            $rootScope.strategies.push(strategy);
        //        }
        //
        //        // handle phony strategy
        //        if (strategy.strategyName == "_PHONY_STRATEGY_") {
        //            var deviceId = strategy.featureList[0].device.id;
        //            if (strategy.state == "RUNNING" || obj.state == "SUSPENDED") {
        //                $rootScope.phonyStrategyMap[deviceId] = strategy;
        //            } else if (strategy.state == "DONE") {
        //                if (deviceId in $rootScope.phonyStrategyMap) {
        //                    delete $rootScope.phonyStrategyMap[deviceId];
        //                }
        //                var notifyMsg = "设备任务完成";
        //                var notifyOpts = {
        //                    status: 'info',
        //                    pos: 'bottom-center'
        //                };
        //                Notify.alert(notifyMsg, notifyOpts);
        //            }
        //            console.log("update phony strategy:");
        //            console.log(strategy);
        //        }
        //    }
        // },

        updateFrontInfo:function (obj) {
            switch (obj.kind) {
                case 0:
                    //deviceinfo update
                    var msgDevice = obj.instance;
                    var updatingDevice=$rootScope.devices.filter(function (device,index) {
                        return msgDevice.id==device.id;
                    })[0];
                    Object.keys(updatingDevice).forEach(function (key) {
                        if(key==='initParam') msgDevice['initParam']=JSON.parse(msgDevice['initParam']);
                       updatingDevice[key]=msgDevice[key];
                    });
                    console.log("update device:");
                    console.log(updatingDevice);
                  //  location.reload(); ///??????
                  //  if(angular.element("#device-list").scope())angular.element("#device-list").scope().$apply();
                  //  $rootScope.$apply();
                    break;
                case 1:
                    //strategy update
                    // handle normal strategy
                    var isNew = true;
                    var strategy = obj.instance;
                    for (var i = 0; i < $rootScope.strategies.length; i++) {
                        if ($rootScope.strategies[i].strategyId == strategy.strategyId) {
                            $rootScope.strategies.splice(i, 1, JSON.parse(JSON.stringify(strategy)));
                            isNew = false;
                            console.log("update strategy:");
                            console.log(strategy);
                       //     if(angular.element("#strategy-list").scope())angular.element("#strategy-list").scope().$apply();
                            console.log('apply delete');
                        }
                    }
                    if (isNew) {
                        console.log("update strategy:");
                        console.log(strategy);
                        $rootScope.strategies.push(strategy);
                    //    if(angular.element("#strategy-list").scope())angular.element("#strategy-list").scope().$apply();
                        console.log('apply');
                    }

                    // handle phony strategy
                    if (strategy.strategyName == "_PHONY_STRATEGY_") {
                        var deviceId = strategy.featureList[0].device.id;
                        if (strategy.state == "RUNNING" || obj.state == "SUSPENDED") {
                            $rootScope.phonyStrategyMap[deviceId] = strategy;
                        } else if (strategy.state == "DONE") {
                            if (deviceId in $rootScope.phonyStrategyMap) {
                                var clientStrategy=$rootScope.phonyStrategyMap[deviceId];
                                var argList=clientStrategy.featureList[0].featureArgValueDtoList;
                                var clientDevice=$rootScope.devices.filter(function (item) {
                                    return item.id===deviceId
                                })[0];
                                argList.forEach(function (argObj) {
                                    clientDevice.initParam[argObj.argName]=argObj.value;
                                });
                                console.log(clientDevice);
                                delete $rootScope.phonyStrategyMap[deviceId];
                            }
                            var notifyMsg = "设备任务完成";
                            var notifyOpts = {
                                status: 'info',
                                pos: 'bottom-center'
                            };
                            Notify.alert(notifyMsg, notifyOpts);
                        }
                        console.log("update phony strategy:");
                        console.log(strategy);
                    }
                    //location.reload();
                    break;
                case 2: //deviceAdd
                    var msgDevice = obj.instance;
                    break;
            }
            $rootScope.$apply();
        }
    };
}
/**=========================================================
 * Module: notify.js
 * Create a notifications that fade out automatically.
 * Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
 =========================================================*/
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.Notify = ["$timeout", function($timeout){
    return {
        alert: function alert(msg, opts) {
            if ( msg ) {
                $timeout(function(){
                    $.notify(msg, opts || {});
                });
            }
        }
    }
}];



/**
 * Notify Addon definition as jQuery plugin
 * Adapted version to work with Bootstrap classes
 * More information http://getuikit.com/docs/addons_notify.html
 */

(function($, window, document){

    var containers = {},
        messages   = {},

        notify     =  function(options){

            if ($.type(options) == 'string') {
                options = { message: options };
            }

            if (arguments[1]) {
                options = $.extend(options, $.type(arguments[1]) == 'string' ? {status:arguments[1]} : arguments[1]);
            }

            return (new Message(options)).show();
        },
        closeAll  = function(group, instantly){
            if(group) {
                for(var id in messages) { if(group===messages[id].group) messages[id].close(instantly); }
            } else {
                for(var id in messages) { messages[id].close(instantly); }
            }
        };

    var Message = function(options){

        var $this = this;

        this.options = $.extend({}, Message.defaults, options);

        this.uuid    = "ID"+(new Date().getTime())+"RAND"+(Math.ceil(Math.random() * 100000));
        this.element = $([
            // @geedmo: alert-dismissable enables bs close icon
            '<div class="uk-notify-message alert-dismissable">',
                '<a class="close">&times;</a>',
                '<div>'+this.options.message+'</div>',
            '</div>'

        ].join('')).data("notifyMessage", this);

        // status
        if (this.options.status) {
            this.element.addClass('alert alert-'+this.options.status);
            this.currentstatus = this.options.status;
        }

        this.group = this.options.group;

        messages[this.uuid] = this;

        if(!containers[this.options.pos]) {
            containers[this.options.pos] = $('<div class="uk-notify uk-notify-'+this.options.pos+'"></div>').appendTo('body').on("click", ".uk-notify-message", function(){
                $(this).data("notifyMessage").close();
            });
        }
    };


    $.extend(Message.prototype, {

        uuid: false,
        element: false,
        timout: false,
        currentstatus: "",
        group: false,

        show: function() {

            if (this.element.is(":visible")) return;

            var $this = this;

            containers[this.options.pos].show().prepend(this.element);

            var marginbottom = parseInt(this.element.css("margin-bottom"), 10);

            this.element.css({"opacity":0, "margin-top": -1*this.element.outerHeight(), "margin-bottom":0}).animate({"opacity":1, "margin-top": 0, "margin-bottom":marginbottom}, function(){

                if ($this.options.timeout) {

                    var closefn = function(){ $this.close(); };

                    $this.timeout = setTimeout(closefn, $this.options.timeout);

                    $this.element.hover(
                        function() { clearTimeout($this.timeout); },
                        function() { $this.timeout = setTimeout(closefn, $this.options.timeout);  }
                    );
                }

            });

            return this;
        },

        close: function(instantly) {

            var $this    = this,
                finalize = function(){
                    $this.element.remove();

                    if(!containers[$this.options.pos].children().length) {
                        containers[$this.options.pos].hide();
                    }

                    delete messages[$this.uuid];
                };

            if(this.timeout) clearTimeout(this.timeout);

            if(instantly) {
                finalize();
            } else {
                this.element.animate({"opacity":0, "margin-top": -1* this.element.outerHeight(), "margin-bottom":0}, function(){
                    finalize();
                });
            }
        },

        content: function(html){

            var container = this.element.find(">div");

            if(!html) {
                return container.html();
            }

            container.html(html);

            return this;
        },

        status: function(status) {

            if(!status) {
                return this.currentstatus;
            }

            this.element.removeClass('alert alert-'+this.currentstatus).addClass('alert alert-'+status);

            this.currentstatus = status;

            return this;
        }
    });

    Message.defaults = {
        message: "",
        status: "normal",
        timeout: 5000,
        group: null,
        pos: 'top-center'
    };


    $["notify"]          = notify;
    $["notify"].message  = Message;
    $["notify"].closeAll = closeAll;

    return notify;

}(jQuery, window, document));

/**
 * Created by sirhuoshan on 2015/7/1.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.StrategyService = function($http, $cookies,$rootScope){
    return{
        getStrategies:function(){
            //var user = $cookies['sunny_user'];
            var user = $.cookie('sunny_user');
            if (user != undefined) {
                var usercookie = JSON.parse(user);
                var hashUserId = usercookie.hashUserId;
               return $http({
                    method:'GET',
                    url: 'strategies',
                    params: {hashUserId:hashUserId}
                }).then(function(data){
                    return data.data;
                },function(data){
                    console.log('get strategies failures');
                });
            } else {
                console.log("cookie user not exist.");
            }

        },
        saveStrategies:function(strategyInstance){
                var user = $.cookie('sunny_user');
                if (user != undefined) {
                    var usercookie = JSON.parse(user);
                    var hashUserId = usercookie.hashUserId;
                  return  $http({
                        method:'POST',
                        url: 'strategy',
                        params: {hashUserId:hashUserId,strategyInstance:strategyInstance}
                    }).then(function (res) {
                        return res.data;
                      console.log('save strategies successful')
                      },function(data){
                        console.log('save strategies failures');
                    });
                }
    },
    deleteStrategy:function(strategyId,callback){
        var user = $.cookie('sunny_user');
        if (user != null) {
            var usercookie = JSON.parse(user);
            var hashUserId = usercookie.hashUserId;
            $http({
                method:'GET',
                url: 'strategy',
                params: {hashUserId:hashUserId, strategyId:strategyId}
            }).then(function(data){
                if(data.data.status == 'success'){
                    callback(data.data);
                    console.log('delete strategy success');
                }else{
                    console.log('delete strategy failed');
                }
            },function(data){
                console.log('delete strategy failed');
            });
        }
    },
    operateStrategy:function(strategyId, action, callback){
        $http({
            method:'GET',
            url: 'operateStrategy',
            params: {strategyId:strategyId,action:action}
        }).then(function(res){
            if(res.data.status == 'success'){
                console.log('operate strategy success');
                callback(res.data);
            }else{
                console.log('operate strategy failed');
            }
        },function(data){
            console.log('operate strategy failed');
        })
    }
}
}
/**
 * Created by sirhuoshan on 2015/7/1.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.UserService = function($http, $cookies) {
    return {
        logout:function(callback){
            //var user = $cookies['sunny_user'];
            var user = $.cookie('sunny_user');
            if (user != undefined) {
                var usercookie = JSON.parse(user);
                var hashUserId = usercookie.hashUserId;
                $http({
                    method:'POST',
                    url: 'logout',
                    params: {hashUserId:hashUserId}
                }).then(function(data){
                    callback(data);
                },function(data){
                    console.log('logout failures');
                });
            } else {
                console.log("cookie user not exist.");
            }

        }
    }
}
/**
 * Created by sirhuoshan on 2015/7/15.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.service = anicloud.sunny.service || {};

anicloud.sunny.service.WebSocketService = function () {
    var _this = this;
    var sock = null;
    var isOpen = false;
    return {
        openSocket: function (url, onOpen, onClose, onError, onMessage) {
            if (sock && isOpen) {
                sock.close();
            }

            sock = new WebSocket(url);

            sock.onopen = function () {
                isOpen = true;
                if (onOpen != null) {
                    onOpen();
                }
            };

            sock.onclose = function (event) {
                if (onClose != null) {
                    onClose(event.data);
                }
            };

            sock.onerror = function (event) {
                if (onError != null) {
                    onError(event.data);
                }
            }

            sock.onmessage = function (event) {
                // Get the content
                var content = event.data;
                var obj = JSON.parse(content);
                if (onMessage != null) {
                    onMessage(obj);
                }
            };
        },
        closeSocket: function () {
            if (isOpen) {
                sock.close();
            }
        },
        sendMessage: function (message) {
            if (isOpen) {
                sock.send(message);
            }
        }
    }
}

/**
 * Created by zhaoyu on 15-06-10.
 */
var anicloud = anicloud || {};
anicloud.sunny = anicloud.sunny || {};
anicloud.sunny.controller = anicloud.sunny.controller || {};
anicloud.sunny.service = anicloud.sunny.service || {};
anicloud.sunny.config = anicloud.sunny.config || {};
anicloud.sunny.directive = anicloud.sunny.directive || {};
anicloud.sunny.global = anicloud.sunny.global || {};


if (window.console) {
    console.log(" Sunny Project is powered by Anicloud Smart Home Application, Platform Group(Beijing), Anicloud Limited");
}


anicloud.sunny.global.loadApp = function (config, controller, service, directive, appName) {
    var app = angular.module(appName, [
        'ngRoute',
        'ngCookies',
        'ngDialog',
        'ui.bootstrap',
      //  'ui.bootstrap.datetimepicker',
        'ui.router',
    ]);
    //config
    for (var key in config) {
        app.config(config[key]);
    }

    //service
    for (var key in service) {
        app.factory(key, service[key]);
    }

    //controller
    for (var key in controller) {
        app.controller(key, controller[key]);
    }

    //directives
    for (var key in directive) {
        app.directive(key, directive[key]);
    }

    //app.config(['$qProvider', function ($qProvider) {
    //    $qProvider.errorOnUnhandledRejections(false);
    //}]);
    app.run(function($rootScope, StrategyService, DeviceService, WebSocketService, ManagerService) {
        $rootScope.strategies = [];
        $rootScope.devices = [];
        $rootScope.features = [];
        $rootScope.triggers = [];
        $rootScope.phonyStrategyMap = {};
        $rootScope.busyDeviceMap = {};
        $rootScope.initParam = {};

        $rootScope.deviceDetailVisible=false;
        $rootScope.DOMClickHasRun=false;
        $rootScope.queryObjectByPropertyValue=function (body,property,value) {
            function propertyInArray (body,property,value) { //body can be group device account,etc
                for(var i=0;i<body.length;i++){
                    if(body[i][property]==value){
                        return [i,body[i]];
                    }
                }
                return null;
            };
            function propertyInObject (body,property,value) {
                for(var key in body){
                    if(key[property]==value){
                        return [key,body[key]];
                    }
                }
                return null;
            }
            if(Object.prototype.toString.call(body).indexOf('Array')>-1){
                return propertyInArray(body,property,value);
            }else if(Object.prototype.toString.call(body).indexOf('Object')>-1){
                return propertyInObject(body,property,value);
            }
        };
        //$rootScope.sidebarToggle=function(event){
        //  console.log('sidebarToggle',event)
        //};
        document.addEventListener('click',function(e){
            //console.log(e.target.scope())
            var sidebarObj=angular.element('#sidebar');
            if(sidebarObj.length>0) var sidebarCtrl=sidebarObj.scope();
            var clickCtrl=angular.element(e.target).scope();
            var result=null;
            function scopeBelong(sidebarCtrl,clickCtrl){
                if(!clickCtrl.$parent) return result=false;
                else if(clickCtrl===sidebarCtrl) return result=true;
                else scopeBelong(sidebarCtrl,clickCtrl.$parent)
            }
            if(sidebarCtrl&&$rootScope.deviceDetailVisible&&!scopeBelong(sidebarCtrl,clickCtrl)&&result!==true)
                $rootScope.deviceDetailVisible=false;
            $rootScope.$apply();
            //console.log(angular.element(e.target).scope(),sidebarCtrl)
        });
        StrategyService.getStrategies().then(function (data) {
            $rootScope.strategies = data;
            for (var strategy in data) {
                if (strategy.strategyName == "_PHONY_STRATEGY_") {
                    var key = strategy.featureList[0].device.id;
                    $rootScope.phonyStrategyMap[key] = strategy;
                }

                if (strategy.state == "RUNNING" || strategy.state == "PAUSE") {
                    $rootScope.busyDeviceMap[strategy.featureList[strategy.stage].device.id] = 1;
                }
            }
        });

        DeviceService.getDevices(function (data) {
            $rootScope.devices = data;
            for (var i = 0; i < $rootScope.devices.length; i++) {
                var device=$rootScope.devices[i].initParam;
                if(device!==null&&device!=="")
                    $rootScope.devices[i].initParam = JSON.parse($rootScope.devices[i].initParam);
            }
        });

        DeviceService.getDeviceFeatures().then(function (data) {
            for (var i = 0; i < data.length; i++) {
                var key = data[i].deviceFormDto.id;
                var value = data[i].deviceFeatureFormDtoList;
                $rootScope.features[key] = value;
            }
        });

        DeviceService.getFeatureTrigger(function (data) {
            $rootScope.triggers = data;
        });
        $rootScope.defaultPath="";
        $rootScope.config={
            dev:{
                defaultPath:'',
                wsPath:'ws://localhost:9000/'
            },
            prod:{
                defaultPath:'public',
                wsPath:"ws://localhost:8080/sunny/socket/strategy"
            }
        };
        $rootScope.currentConfig=$rootScope.config.dev;
        WebSocketService.openSocket(
            // "ws://localhost:8080/sunny/socket/strategy",
            $rootScope.currentConfig.wsPath,
            null,
            null,
            null,
            ManagerService.updateFrontInfo
        );

    });
    moment.locale('zh-cn');
};

anicloud.sunny.global.loadApp(
    anicloud.sunny.config,
    anicloud.sunny.controller,
    anicloud.sunny.service,
    anicloud.sunny.directive,
    'sunny');
